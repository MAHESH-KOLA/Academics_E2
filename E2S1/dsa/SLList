#include <iostream>

using namespace std;

struct Node
{
    int data;
    Node *next;
    Node(int x)
    {
        data = x;
        next = NULL;
    }
};
void display(Node *head)
{
    Node *temp = head;
    while(temp != NULL)
    {
        cout << temp->data << " ";
        temp = temp->next;
    }
}
Node *insert_head(Node *head, int val)
{
    Node *nn = new Node(val);
    nn->next = head;
    head = nn;
    return head;
}
Node *insert_tail(Node *head, int val)
{
    Node *temp = head;
    while(temp->next != NULL)
        temp = temp->next;
    temp->next = new Node(val);
    return head;
}
Node *delete_head(Node *head)
{
    Node *temp = head;
    head = head->next;
    delete(temp);
    return head;
}
Node *delete_tail(Node *head)
{
    if(head==NULL)return NULL;
    if(head->next==NULL){
        delete head;
        return NULL;
    }
    Node *temp=head;
    while(temp->next->next!=NULL)
        temp=temp->next;
    delete (temp->next);
    temp->next=NULL;
    return head;
}
Node *insert_pos(Node *head, int pos, int x)
{
    Node *nn = new Node(x);
    if(pos == 1)
    {
        nn->next = head;
        return nn;
    }
    Node *temp = head;
    for(int i = 1; i <= pos-2 && temp != NULL; i++)
        temp= temp->next;
    if(temp == NULL){
    cout <<"position "<< pos << " does not exist in List";
    return head;
    }
    nn->next = temp->next;
    temp->next = nn;
    return head;
}
int search(Node * head, int val){
    int pos=1;
    Node *temp=head;
    while(temp!=NULL){
        if(temp->data==val)
            return pos;
        else{
            pos++;
            temp=temp->next;
        }
    }
    return -1;
}

int main()
{
     Node *head = new Node(1);
     head->next = new Node(2);
     head->next->next = new Node(3);
     head->next->next->next = new Node(4);
     display(head);
     head = insert_head(head,5);
     cout << endl;
     display(head);
     head = insert_tail(head,10);
     cout << endl;
     display(head);
     head = delete_head(head);
     cout << endl;
     display(head);
     head = delete_tail(head);
     cout << endl;
     display(head);
     cout << endl;
     head = insert_pos(head,5,20);
     cout << endl;
     display(head);
     cout << endl;
     cout<<"found at position "<<search(head, 20);
     cout << endl << endl;
    return 0;
}

